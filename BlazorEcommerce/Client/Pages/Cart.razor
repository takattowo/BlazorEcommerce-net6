@page "/cart"
@inject ICartService CartService

@if(cartProducts == null)
{
    <p>@message</p>
}
else
{
    <div class="container mt-5 mb-5">
    <div class="d-flex justify-content-center row">
        <div class="col-md-8">
            <div class="p-2">
                <h4>Shopping cart</h4>
            </div>
                @foreach (var item in cartProducts)
                {
                     <div class="d-flex flex-row justify-content-between align-items-center p-2 bg-grey mt-4 px-3 rounded">
                <div class="mr-1"><img class="rounded" src="@item.ImageUrl" width="70"></div>
                <div class="d-flex flex-column align-items-center product-details"><span class="font-weight-bold">@item.Title</span>
                    <div class="d-flex flex-row product-desc">
                        <div class="size mr-2"><span class="text-grey">Variant: </span><span class="font-weight-bold">@item.ProductType</span></div>
                    </div>
                </div>
                <div class="d-flex flex-row align-items-center qty">
                    <i @onclick="() => DecreaseQty(item)" class="oi oi-minus text-danger"></i>
                    <h5 class="text-grey mt-1 mr-1 ml-1" style="padding: 0 5px"> @item.Quantity </h5>
                    <i @onclick="() => IncreaseQty(item)" class="oi oi-plus text-success"></i>
                </div>
                <div>
                    <h5 class="text-grey">$@item.Price</h5>
                </div>
                <button @onclick="()=> RemoveFromCart(item.ProductId, item.ProductTypeId)" class="d-flex align-items-center"><i class="oi oi-trash mb-1 text-danger"></i></button>
                </div>
                }
               
           
            <div class="d-flex flex-row align-items-center mt-3 p-2 bg-white rounded"><input type="text" class="form-control border-0 gift-card" placeholder="discount code/gift card"><button class="btn btn-outline-warning btn-sm ml-2" type="button">Apply</button></div>
            <div class="d-flex flex-row align-items-center mt-3 p-2 bg-white rounded"><button class="btn btn-warning btn-block btn-lg ml-2 pay-button" type="button">@cartProducts.Sum(p => p.Price)</button></div>
        </div>
    </div>
</div>
}

@code {
    List<CartServiceResponse> cartProducts = null;
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task LoadCart()
    {
        if((await CartService.GetAll()).Count <= 0)
        {
            message = "Your cart is empty you dipshit";
            cartProducts = new List<CartServiceResponse>();

        }
        else
        {
            cartProducts = await CartService.GetProducts();
        }
    }

    private async Task IncreaseQty(CartServiceResponse product)
    {
        product.Quantity += 1;
        await CartService.UpdateQty(product);
    }    

    private async Task DecreaseQty(CartServiceResponse product)
    {
        product.Quantity -= 1;
        if (product.Quantity <= 0)
            product.Quantity = 1;

        await CartService.UpdateQty(product);
    }

    private async Task RemoveFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveFromCart(productId, productTypeId);
        await LoadCart();
    }
}
