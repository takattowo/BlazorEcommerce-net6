@inject IProductService ProductService
@implements IDisposable

@if(ProductService.Products == null || ProductService.Products.Count == 0)
{
    <p>@ProductService.Message</p>
}
else
{
    <div class="container">
        <div class="row">
    @foreach (var book in ProductService.Products)
    {
        <div class="col-md-3">
        <div class="ibox">
            <div class="ibox-content product-box">
                <div class="product-imitation">
                    <img src="@book.ImageUrl" alt="@book.Title" title="@book.Title">
                </div>
                <div class="product-desc">
                    <span class="product-price">
                        @GetPriceText(book)
                    </span>
                    <small class="text-muted">@book.CategoryId</small>
                    <a href="/product/@book.Id" class="product-name"> @book.Title</a>

                    <div class="small m-t-xs">
                        @book.Description
                    </div>
                </div>
            </div>
        </div>
    </div>

    }
        </div>
    </div>

    for (var i = 1; i < ProductService.PageCount; i++)
    {
        <a class="btn @(i == ProductService.PageCount ? "btn-info" : "btn-outline-info") page-selection"
        href="/search/@ProductService.LastSearchText/@i">@i</a>
    }
}

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if(variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(v=>v.Price);
        return $"Starting at ${minPrice}";
    }
}
